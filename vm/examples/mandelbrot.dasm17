initial f32 top, left, bottom, right, 16.0f;
final f32 result[256];

    ld   %0,$0   ; %0 = top
    ld   %1,$1   ; %1 = left
    ld   %2,$2   ; %2 = bottom
    ld   %3,$3   ; %3 = right
    ld   %4,$4   ; %4 = 16.0f
    sub  %2,%0   ; %2 = height (bottom - top)
    sub  %3,%1   ; %3 = width  (right - left)
    div  %2,%4   ; %2 = height increase per iteration ((bottom - top)/16)
    div  %3,%4   ; %3 = width increase per iteration ((right - left)/16)
    zero @0      ; @0 = output pointer
    set  @1,$16  ; @1 = iterations top-to-bottom
    set  @2,$16  ; @2 = iterations left-to-right
    mov  %4,%0   ; %4 = F_Y
L5: mov  %5,%1   ; %5 = F_X
L6: set  @3,$1   ; @3 = iteration count
L1: mov  %6,%4   ; %6 = F_Y
    mul  %6,%6   ; %6 = F_Y^2
    mov  %7,%5   ; %7 = F_X
    mul  %7,%7   ; %7 = F_X^2
    add  %6,%7   ; %6 = F_X^2 + F_Y^2
    st   @0,%2   ; save %2 in output position [@0]
    push @0      ; save output pointer
    ld1  %2      ; %2 = 1
    add  %2,%2   ; %2 = 2
    add  %2,%2   ; %2 = 4
    lt   @0,%6,%2; @0 = (%6 < 4)
    sub  %6,%7   ; %6 = F_Y^2
    sub  %6,%7   ; %6 = F_Y^2 - F_X^2
    jc   @0,L2   ; if F_X^2 + F_Y^2 < 4, jmp to L2
    pop  @0      ; restore output pointer
    ld   %2,@0   ; restore %2 (bottom)
    ld0  %4      ; %4 = 0.0
    ld1  %5      ; %5 = 1.0
L3: add  %4,%5   ; %4 = 1.0 * @3
    loop @3,L3   ; (with loop)
    st   @0,%4   ; store 1.0 * @3 into output position
    jmp  L7
L2: pop  @0
    ld   %2,@0
    mov  %7,%4
    add  %7,%7
    mul  %7,%5
    add  %6,%0
    add  %7,%1
    mov  %4,%6
    mov  %5,%7
    inc  @3
    push @3
    cmp  @3,$MAX_ITERATIONS
    jc   L4
    pop  @3
    jmp  L1 
L4: pop  @3
    ld0  %4
    st   @0,%4
    jmp  L7
L7: inc  @0      ; move to next output position
    add  %1,%3   ; increase x by dx
    loop @2,L6
    set  @2,$16
L8: sub  %1,%3   ; yikes!
    loop @2,L8   ; reduce x back to left
    set  @2,$16
    add  %0,%2   ; increase y by dy
    loop @1,L5
    halt
